/*
Copyright 2020 FIRST Tech Challenge Team 14853

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and
associated documentation files (the "Software"), to deal in the Software without restriction,
including without limitation the rights to use, copy, modify, merge, publish, distribute,
sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial
portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT
NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/
package org.firstinspires.ftc.teamcode;

import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.hardware.TouchSensor;
import com.qualcomm.robotcore.eventloop.opmode.Autonomous;
import com.qualcomm.robotcore.hardware.Blinker;
import com.qualcomm.robotcore.hardware.Servo;
import com.qualcomm.robotcore.hardware.Gyroscope;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.eventloop.opmode.Disabled;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.DcMotorSimple;
import com.qualcomm.robotcore.util.ElapsedTime;
import com.qualcomm.robotcore.hardware.TouchSensor;

/**
*
*/
@Autonomous (name="AutoFoundation")

public class AutoFoundation extends LinearOpMode {
    private ElapsedTime runtime = new ElapsedTime();
    private Blinker expansion_Hub_1;
    private Blinker expansion_Hub_2;
    private Servo mini_Arm;
    private DcMotor armMotor;
    private DcMotor backLeft;
    private DcMotor backRight;
    private Servo backServo;
    private DcMotor frontLeft;
    private DcMotor frontRight;
    //private Servo frontServo;
    //private Gyroscope imu2;
    //private Gyroscope imu;
    //private DcMotor intakeLeft;
    //private DcMotor intakeRight;
    private TouchSensor touch;


    @Override
    public void runOpMode() {
        expansion_Hub_1 = hardwareMap.get(Blinker.class, "Expansion Hub 1");
        expansion_Hub_2 = hardwareMap.get(Blinker.class, "Expansion Hub 2");
        mini_Arm = hardwareMap.get(Servo.class, "Mini Arm");
        //armMotor = hardwareMap.get(DcMotor.class, "armMotor");
        backLeft = hardwareMap.get(DcMotor.class, "backLeft");
        backRight = hardwareMap.get(DcMotor.class, "backRight");
        //backServo = hardwareMap.get(Servo.class, "backServo");
        frontLeft = hardwareMap.get(DcMotor.class, "frontLeft");
        frontRight = hardwareMap.get(DcMotor.class, "frontRight");
        //frontServo = hardwareMap.get(Servo.class, "frontServo");
        //imu2 = hardwareMap.get(Gyroscope.class, "imu2");
        //imu = hardwareMap.get(Gyroscope.class, "imu");
        //intakeLeft = hardwareMap.get(DcMotor.class, "intakeLeft");
        //intakeRight = hardwareMap.get(DcMotor.class, "intakeRight");
        touch = hardwareMap.touchSensor.get("touchSensor");
        
        // This is a ternary operator, which is 
        // a statment true/false input that returns
        // a value based on the true/false output.
        // In this case, if the alliance is red, we return 1
        // If it's blue, we return -1.
        double a = touch.isPressed() ? -1.0:1.0;
  
        telemetry.addData("Status", "Initialized");
        telemetry.update();
        
        // Wait for the game to start (driver presses PLAY)
        waitForStart();

        // run until the end of the match (driver presses STOP)
        telemetry.addData("Status", "Running");
        telemetry.update();
        
        //pause(10);
        //Forward to foundation
        drive(1.0, 0.0, 2, a);
        //Hook the foundation
        mini_Arm.setPosition(0.1);
        pause(.5);
        //Drive backwards to wall
        drive(-1.0, 0.0, 2.2, a);
        //Drive right to corner
        //drive(0.0, -1.0, .6, a);
        //Unhook foundation
        mini_Arm.setPosition(0.9);
        pause(.5);
        //perform upside down u
        drive(.65, 0.5, 2, a);
        drive(0, -1, 1.25, a);
        drive(-0.75, -.65, 3.5, a);
        

        //Drive left to park
        drive(0.4, 1.0, 3.8, a);
        
        //drive(1,0,2.7,a);
        //drive(0,1,.5,a);
    }
    
    public void pause(double time){
        runtime.reset();
        while(opModeIsActive() && (runtime.seconds() < time)){
            // Do nothing!
        }
    }
    
    public void drive(double forward, double right, double time, double a) {
        runtime.reset();
        forward *= a;
        backLeft.setPower(-right - forward);
        backRight.setPower(-right + forward);
        frontLeft.setPower(right - forward);
        frontRight.setPower(right + forward);

        while(opModeIsActive() && (runtime.seconds() < time)){
            // Driving Forward
        }
    
        // Set all motors to zero power
        backLeft.setPower(0);
        backRight.setPower(0);
        frontLeft.setPower(0);
        frontRight.setPower(0);
    }
}
